name: Prod

on:
  pull_request:
    types:
      - closed
    branches:
      - main

  workflow_dispatch:
    inputs:
      ACTION:
        description: "Select Action"
        type: choice
        default: UPDATE
        options:
        - UPDATE
        - DESTROY

jobs:
  update:
    if: ${{ (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch' && github.event.inputs.ACTION == 'UPDATE') }}
    name: Update
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Add .ssh directory'
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
      - name: 'Copy public key'
        run: |
          echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/${{ vars.SSH_PUBLIC_KEY_NAME }}
          chmod 0400 ~/.ssh/${{ vars.SSH_PUBLIC_KEY_NAME }}
      - name: Update Stack
        id: pulumi
        uses: pulumi/actions@v4.5.0
        with:
          command: update
          stack-name: personal-site-iac
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          TF_VAR_compartment_ocid: ${{ inputs.TF_VAR_COMPARTMENT_OCID }}
    outputs:
      INSTANCE_PUBIP: ${{ steps.output.pulumi.instance_pubip }}

  configure:
    name: Configure Instance
    needs: [ update ]
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Add .ssh directory'
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
      - name: 'Copy private key'
        run: |
          echo "${{ vars.SSH_PRIVATE_KEY }}" > ~/.ssh/${{ vars.SSH_PRIVATE_KEY_NAME }}
          chmod 0400 ~/.ssh/${{ vars.SSH_PRIVATE_KEY_NAME }}
      - name: Install Ansible
        run: |
          sudo apt update -y
          sudo apt install software-properties-common -y
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y
      - name: Deploy
        run: |
          ansible-playbook ./ansible/playbooks/configure.yml \
            --inventory ${{ needs.update.outputs.INSTANCE_PUBIP }}, \
            --user ${{ secrets.SSH_USERNAME }} \
            --key-file ~/.ssh/${{ vars.SSH_PRIVATE_KEY_NAME }} \
            --verbose \
            --extra-vars "CF_TUNNEL_JSON_ENCODED=${{ secrets.CF_TUNNEL_JSON_ENCODED }}"

  records:
    name: Create Cloudflare Tunnel and DNS Records
    needs: [ update ]
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Create Cloudflare Tunnel
        id: create_tunnel
        run: |
          TUNNEL_RESP=$(curl -X POST --url https://api.cloudflare.com/client/v4/accounts${{ secrets.CF_ACCOUNT_ID }}/cfd_tunnel \
            --header 'Content-Type: application/json' \
            --header 'X-Auth-Email: ${{ secrets.CF_API_USER }}' \
            --header 'X-Auth-Key: ${{ secrets.CF_API_KEY }}' --data '{
            "config_src": "cloudflare",
            "name": "${{ inputs.TUNNEL_NAME }}",
            "tunnel_secret": "${{ secrets.CF_TUNNEL_SECRET }}"}')
          TUNNEL_OUTCOME=$(echo ${TUNNEL_RESP} | jq -r '.success')
          TUNNEL_ID=$(echo ${TUNNEL_JSON} | jq -r '.result.id')
          echo "CF_TUNNEL_ID=${TUNNEL_ID}" >> $GITHUB_OUTPUT
      - name: Create Cloudflare DNS Records
        run: |
          DNS_RESP=$(curl -X POST --url https://api.cloudflare.com/client/v4/zones/${{ vars.CF_ZONE_ID }}/dns-records \
            --header 'Content-Type: application/json' \
            --header 'X-Auth-Email: ${{ secrets.CF_API_USER }}' \
            --header 'X-Auth-Key: ${{ secrets.CF_API_KEY }}' --data '{
            "content": "${{ steps.create_tunnel.outputs.CF_TUNNEL_ID }}.cfargotunnel.com",
            "name": "${{ vars.SSH_RECORD_NAME }}",
            "proxied": false,
            "type": "CNAME",
            "ttl": 3600}')
          OUTCOME=$(echo $RESP | jq -r '.success')
          echo $RESP
          if [ "$OUTCOME" != 'true' ]; then
            echo "ERROR while creating DNS record"
            exit 1
          fi

  destroy:
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.ACTION == 'DESTROY') }}
    name: Destroy
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Create SSH Public Key file'
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/${{ vars.SSH_PUBLIC_KEY_NAME }}
          chmod 0400 ~/.ssh/${{ vars.SSH_PUBLIC_KEY_NAME }}
      - name: Destroy Stack
        uses: pulumi/actions@v4.5.0
        with:
          command: destroy
          stack-name: personal-site-iac
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          TF_VAR_compartment_ocid: ${{ inputs.TF_VAR_COMPARTMENT_OCID }}
